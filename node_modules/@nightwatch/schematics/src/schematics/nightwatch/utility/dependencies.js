"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addPackageJsonDependency = exports.getPackageJsonDependency = void 0;
const util_1 = require("./util");
const json_utils_1 = require("./json-utils");
const enums_1 = require("../enums");
function getPackageJsonDependency(tree, name) {
    const packageJson = util_1.parseJsonAtPath(tree, enums_1.pkgJson.Path);
    let dep = null;
    [
        enums_1.NodeDependencyType.Default,
        enums_1.NodeDependencyType.Dev,
        enums_1.NodeDependencyType.Optional,
        enums_1.NodeDependencyType.Peer,
    ].forEach((depType) => {
        if (dep !== null) {
            return;
        }
        const depsNode = json_utils_1.findPropertyInAstObject(packageJson, depType);
        if (depsNode !== null && depsNode.kind === 'object') {
            const depNode = json_utils_1.findPropertyInAstObject(depsNode, name);
            if (depNode !== null && depNode.kind === 'string') {
                const version = depNode.value;
                dep = {
                    type: depType,
                    name: name,
                    version: version,
                };
            }
        }
    });
    return dep;
}
exports.getPackageJsonDependency = getPackageJsonDependency;
function addPackageJsonDependency(tree, dependency) {
    const packageJsonAst = util_1.parseJsonAtPath(tree, enums_1.pkgJson.Path);
    const depsNode = json_utils_1.findPropertyInAstObject(packageJsonAst, dependency.type);
    const recorder = tree.beginUpdate(enums_1.pkgJson.Path);
    if (!depsNode) {
        // Haven't found the dependencies key, add it to the root of the package.json.
        json_utils_1.appendPropertyInAstObject(recorder, packageJsonAst, dependency.type, {
            [dependency.name]: dependency.version,
        }, 4);
    }
    else if (depsNode.kind === 'object') {
        // check if package already added
        const depNode = json_utils_1.findPropertyInAstObject(depsNode, dependency.name);
        if (!depNode) {
            // Package not found, add it.
            json_utils_1.insertPropertyInAstObjectInOrder(recorder, depsNode, dependency.name, dependency.version, 4);
        }
        else if (dependency.overwrite) {
            // Package found, update version if overwrite.
            const { end, start } = depNode;
            recorder.remove(start.offset, end.offset - start.offset);
            recorder.insertRight(start.offset, JSON.stringify(dependency.version));
        }
    }
    tree.commitUpdate(recorder);
}
exports.addPackageJsonDependency = addPackageJsonDependency;
//# sourceMappingURL=dependencies.js.map